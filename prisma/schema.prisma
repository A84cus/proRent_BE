// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  OWNER
}

enum SocialLogin {
  NONE
  GOOGLE
  FACEBOOK
  TWITTER
}

enum PaymentType {
  MANUAL_TRANSFER
  XENDIT
}

enum Status {
  PENDING_PAYMENT
  PENDING_CONFIRMATION
  CONFIRMED
  CANCELLED
}

enum RateType {
  FIXED
  PERCENTAGE
}

enum PropertyRentalType {
  WHOLE_PROPERTY // menyewakan seluruh property
  ROOM_BY_ROOM // menyewakan kamar dalam 1 property
}

//Bagian User dan auth

model User {
  id                  String        @id @default(nanoid(12))
  email               String        @unique
  password            String?
  role                Role          @default(USER)
  isVerified          Boolean       @default(false)
  socialLogin         SocialLogin   @default(NONE)
  verificationToken   String?       @unique
  verificationExpires DateTime?
  resetToken          String?       @unique
  resetExpires        DateTime?
  profile             Profile?
  reservations        Reservation[] @relation("UserReservation")
  properties          Property[]    @relation("PropertyOwner")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Reviewer            Review[]      @relation("Reviewer")
  Reviewee            Review[]      @relation("Reviewee")

  @@index([email])
  @@index([role])
}

model Profile {
  id         String    @id @default(nanoid(12))
  userId     String    @unique
  firstName  String?
  lastName   String?
  phone      String?
  avatarId   String?   @unique
  avatar     Picture?  @relation(fields: [avatarId], references: [id])
  birthDate  DateTime?
  address    String?
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

model Province {
  id        String   @id @default(nanoid(12))
  name      String   @unique
  cities    City[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id         String     @id @default(nanoid(12))
  name       String
  provinceId String
  province   Province   @relation(fields: [provinceId], references: [id])
  locations  Location[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([name, provinceId]) // menghindari duplikasi data
}

model Location {
  id         String     @id @default(nanoid(12))
  name       String
  latitude   Decimal?
  longitude  Decimal?
  address    String?
  cityId     String
  city       City       @relation(fields: [cityId], references: [id])
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Profile    Profile[]

  @@index([cityId])
  @@index([latitude, longitude])
}

// Bagian management Gambar

model Picture {
  id         String   @id @default(nanoid(12))
  url        String // Cloudinary URL
  alt        String? // Accessibility
  type       String? // 'profile', 'property', 'room', 'proof'
  sizeKB     Int? // For validation tracking
  uploadedAt DateTime @default(now())

  propertyGallery PropertyPicture[]
  roomGallery     RoomPicture[]
  paymentProof    PaymentProof?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Profile   Profile[]
  Property  Property[] @relation("PropertyMainPicture")

  @@index([type])
}

model PropertyPicture {
  propertyId String
  pictureId  String

  property Property @relation(fields: [propertyId], references: [id])
  picture  Picture  @relation(fields: [pictureId], references: [id])

  @@id([propertyId, pictureId])
}

model RoomPicture {
  roomId    String
  pictureId String
  room      Room    @relation(fields: [roomId], references: [id])
  picture   Picture @relation(fields: [pictureId], references: [id])

  @@id([roomId, pictureId])
}

// Bagian management Property

model Category {
  id          String     @id @default(nanoid(12))
  name        String     @unique
  description String?
  properties  Property[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Property {
  id            String             @id @default(nanoid(12))
  name          String
  description   String
  locationId    String
  location      Location           @relation(fields: [locationId], references: [id])
  categoryId    String
  category      Category           @relation(fields: [categoryId], references: [id])
  OwnerId       String
  Owner         User               @relation("PropertyOwner", fields: [OwnerId], references: [id])
  mainPicture   Picture?           @relation("PropertyMainPicture", fields: [mainPictureId], references: [id])
  mainPictureId String?
  gallery       PropertyPicture[]
  rooms         Room[]
  roomTypes     RoomType[]
  rentalType    PropertyRentalType @default(ROOM_BY_ROOM)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Reservation   Reservation[]

  @@index([locationId])
  @@index([categoryId])
  @@index([OwnerId])
  @@index([rentalType])
}

model RoomType {
  id             String         @id @default(nanoid(12))
  propertyId     String
  property       Property       @relation(fields: [propertyId], references: [id])
  name           String // contoh: "Standard Double Room", "Entire Luxury Villa"
  description    String?
  basePrice      Decimal // Harga per hari berdasarkan Tipe
  capacity       Int // okupansi kamar maksimum
  totalQuantity  Int // total kamar tersedia (fix 1 untuk tipe whole property)
  isWholeUnit    Boolean        @default(false) // untuk identifikasi tipe whole property
  rooms          Room[] // link untuk mengelompokkan kamar berdasarkan tipe (untuk management kamar dan checkin)
  availabilities Availability[] // link untuk mengelompokkan ketersediaan berdasarkan availabilities
  peakRates      PeakRate[] // link untuk mengelompokkan harga peak berdasarkan tipe
  reservations   Reservation[] // link untuk mengelompokkan reservasi berdasarkan tipe
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([propertyId, name])
  @@index([propertyId])
  @@index([isWholeUnit]) // Index untuk pencarian tipe whole property
}

model Room {
  id             String         @id @default(nanoid(12))
  name           String?
  roomTypeId     String
  roomType       RoomType       @relation(fields: [roomTypeId], references: [id])
  propertyId     String
  property       Property       @relation(fields: [propertyId], references: [id])
  gallery        RoomPicture[]
  reservations   Reservation[]  @relation("RoomReservation")
  isAvailable    Boolean        @default(true)
  availabilities Availability[] @relation("RoomAvailability")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([propertyId])
}

// Bagian management Availability

model Availability {
  id             String   @id @default(nanoid(12))
  date           DateTime
  availableCount Int
  roomTypeId     String
  roomType       RoomType @relation(fields: [roomTypeId], references: [id])
  roomId         String?
  room           Room?    @relation("RoomAvailability", fields: [roomId], references: [id])

  @@unique([roomTypeId, date])
  @@unique([roomId, date]) // satu record per kamar
  @@index([roomTypeId])
  @@index([date])
}

model PeakRate {
  id          String   @id @default(nanoid(12))
  name        String?
  roomTypeId  String
  roomType    RoomType @relation(fields: [roomTypeId], references: [id])
  startDate   DateTime
  endDate     DateTime
  rateType    RateType
  value       Decimal
  description String?

  @@index([startDate, endDate])
  @@index([roomTypeId])
}

//Bagian Booking dan Payment

model Reservation {
  id          String    @id @default(nanoid(12))
  userId      String
  propertyId  String
  roomTypeId  String
  roomId      String?
  startDate   DateTime
  endDate     DateTime
  orderStatus Status    @default(PENDING_PAYMENT)
  CheckinAt   DateTime?
  CheckoutAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  payment      Payment?
  review       Review?
  RoomType     RoomType      @relation(fields: [roomTypeId], references: [id])
  Property     Property      @relation(fields: [propertyId], references: [id])
  Room         Room?         @relation("RoomReservation", fields: [roomId], references: [id])
  User         User          @relation("UserReservation", fields: [userId], references: [id])
  PaymentProof PaymentProof?

  @@index([userId])
  @@index([propertyId])
  @@index([roomTypeId])
  @@index([roomId])
  @@index([orderStatus, createdAt])
}

model invoiceCounter {
  dateKey   String   @id // Format: YYYY-MM-DD
  counter   Int      @default(0) // Counter untuk tanggal tersebut
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                 String      @id @default(nanoid(12))
  invoiceNumber      String
  reservation        Reservation @relation(fields: [reservationId], references: [id])
  reservationId      String      @unique
  amount             Float
  paymentStatus      Status
  method             String
  payerEmail         String
  xenditInvoiceId    String?     @unique
  externalInvoiceUrl String?
  paidAt             DateTime?
  callbackStatus     String?
  xenditCallback     Json?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?

  logs TransactionLog[]

  @@index([paymentStatus])
  @@index([method])
  @@index([paymentStatus, createdAt])
  @@index([xenditInvoiceId]) // Index untuk pencarian berdasarkan xenditInvoiceId
}

model PaymentProof {
  id            String      @id @default(nanoid(12))
  reservationId String      @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  pictureId     String      @unique
  picture       Picture     @relation(fields: [pictureId], references: [id])
  uploadedAt    DateTime    @default(now())
}

// Bagian review

model Review {
  id            String      @id @default(nanoid(12))
  reviewerId    String
  revieweeId    String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String      @unique
  content       String
  rating        Int
  visibility    Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  reviewer   User        @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee   User        @relation("Reviewee", fields: [revieweeId], references: [id])
  OwnerReply OwnerReply?

  @@index([reviewerId])
  @@index([revieweeId])
}

model OwnerReply {
  id         String    @id @default(nanoid(12))
  review     Review    @relation(fields: [reviewId], references: [id])
  reviewId   String    @unique
  content    String
  rating     Int
  visibility Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model TransactionLog {
  id        String   @id @default(nanoid(12))
  payment   Payment  @relation(fields: [paymentId], references: [id])
  paymentId String
  status    String
  message   String
  createdAt DateTime @default(now())

  @@index([paymentId])
}

model EmailLog {
  id        String        @id @default(nanoid(12))
  recipient String // user.email
  template  EmailTemplate // contoh: VERIFICATION, CONFIRMATION, REMINDER
  status    EmailStatus   @default(PENDING)
  subject   String
  body      String? // atau link to template
  sentAt    DateTime?
  error     String? // jika gagal
  metadata  Json? // contoh: { reservationId, userId }
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([recipient])
  @@index([template])
  @@index([status])
  @@index([createdAt])
}

// Enum: Email Template Type
enum EmailTemplate {
  VERIFICATION
  RESET_PASSWORD
  BOOKING_CONFIRMATION
  PAYMENT_CONFIRMED
  CHECK_IN_REMINDER
  REVIEW_REQUEST
  PAYMENT_REJECTED
}

// Enum: Email Status
enum EmailStatus {
  PENDING // antrian belum dikirim
  SENT // sudah dikirim
  FAILED // gagal kirim
  SKIPPED // telah dikirim, dilewati untuk menghindari duplikasi
}
